package com.dms.dao;

import com.dms.model.Department;
import com.dms.util.DbUtil;
import com.dms.exception.DepartmentNotFoundException;

import java.sql.*;
import java.util.*;

public class DepartmentDaoImpl implements DepartmentDao {

    @Override
    public void addDepartment(Department dept) {
        try (Connection con = DbUtil.getConnection();
             PreparedStatement ps = con.prepareStatement("INSERT INTO department(deptName, location) VALUES (?, ?)")) {
            ps.setString(1, dept.getDeptName());
            ps.setString(2, dept.getLocation());
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Department getDepartmentById(int id) {
        Department dept = null;
        try (Connection con = DbUtil.getConnection();
             PreparedStatement ps = con.prepareStatement("SELECT * FROM department WHERE deptId = ?")) {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                dept = new Department(rs.getInt("deptId"), rs.getString("deptName"), rs.getString("location"));
            }
            else {
                throw new DepartmentNotFoundException("Department with ID " + id + " not found.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return dept;
    }

    @Override
    public List<Department> getAllDepartments() {
        List<Department> list = new ArrayList<>();
        try (Connection con = DbUtil.getConnection();
             Statement st = con.createStatement();
             ResultSet rs = st.executeQuery("SELECT * FROM department")) {
            while (rs.next()) {
                list.add(new Department(rs.getInt("deptId"), rs.getString("deptName"), rs.getString("location")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    @Override
    public boolean updateDepartment(Department dept) {
        try (Connection con = DbUtil.getConnection();
             PreparedStatement ps = con.prepareStatement("UPDATE department SET deptName=?, location=? WHERE deptId=?")) {
            ps.setString(1, dept.getDeptName());
            ps.setString(2, dept.getLocation());
            ps.setInt(3, dept.getDeptId());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean deleteDepartment(int id) {
        try (Connection con = DbUtil.getConnection();
             PreparedStatement ps = con.prepareStatement("DELETE FROM department WHERE deptId = ?")) {
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}
